include(CheckSymbolExists)

# Optinal parameters: cpu_var cpu_version_var os_var abi_var
function(detect_platform triple_var)

# Detect native platform
set(cpu_version 0)
if(CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
  set(cpu "arm")
  set(cpu_version 4)
  
  if(CMAKE_SYSTEM_PROCESSOR MATCHES "^armv[0-9]+")
    string(REGEX MATCH "[0-9]+" cpu_version ${CMAKE_SYSTEM_PROCESSOR})
  endif()
elseif(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(cpu "x86_64")
else()
  set(cpu "i386")
endif()

if(WIN32)
  set(os "win")
elseif(ANDROID)
  set(os "linux")
  set(abi "androideabi")
else()
  set(abi "gnu")
  
  if(cpu STREQUAL "arm")
    check_symbol_exists(__ARM_EABI__ "stdio.h" DEFINED_ARM_EABI)
    if(DEFINED_ARM_EABI)
      check_symbol_exists(__ARM_PCS_VFP "stdio.h" DEFINED_ARM_EABIHF)
      if (DEFINED_ARM_EABIHF)
        set(abi "gnueabihf")
      else()
        set(abi "gnueabi")
      endif()
    endif()
  endif()

  if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(os "linux")
  else()
    set(os "unknown")
  endif()
endif()

if(abi)
  set(triple "${cpu_var}-unknown-${os_var}-${abi_var}")
else()
  set(triple "${cpu_var}-unknown-${os_var}")
endif()

if(triple_var)
  set(${triple_var} ${triple} PARENT_SCOPE)
endif()
if(ARGC GREATER 1)
  set(${ARGV1} ${cpu} PARENT_SCOPE)
endif()
if(ARGC GREATER 2)
  set(${ARGV2} ${cpu_version} PARENT_SCOPE)
endif()
if(ARGC GREATER 3)
  set(${ARGV3} ${os} PARENT_SCOPE)
endif()
if(ARGC GREATER 4)
  set(${ARGV4} ${abi} PARENT_SCOPE)
endif()

endfunction()
