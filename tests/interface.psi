libc : library {};
str : pointer(ubyte);
puts : libc.symbol (function (::str -: int)) {"type":"c","name":"puts"};

ti : interface (X:type) [
  invoke : function (:X -: str);
] where [
  ti (type3) [
    invoke : (a) [
      {test3}
    ];
  ];
];

invoke_puts : function (X::type @ ti(X), a:X) [
  puts(ti.invoke(a));
];

type1 : struct [
  ti (type1) [
    invoke : (a) [
      {test1}
    ];
  ];
];

type2 : struct [
  ti [
    invoke : (a) [
      {test2}
    ];
  ];
];

type3 : struct [];

main : function() [
  a : new type1;
  b : new type2;
  c : new type3;
  puts(ti.invoke(a));
  puts(ti.invoke(b));
  puts(ti.invoke(c));
  invoke_puts(type1, a);
  invoke_puts(type2, b);
  invoke_puts(type3, c);
];
