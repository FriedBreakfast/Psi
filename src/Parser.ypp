/* -*- mode: c++ -*- */

%{
#include <cstring>
#include <memory>

#include "Parser.hpp"
#include "ParserUtility.hpp"
#include "Utility.hpp"

/**
 * the semantic value type for the bison parser. this is also needed by the scanner
 * because it will receive this as a parameter.
 */
#define YYSTYPE ParserValue

/**
 * the location type used by the parser and scanner.
 */
#define YYLTYPE ::Psi::Parser::PhysicalSourceLocation

/**
 * I previously made this zero - it must be at least one because
 * the generated code assumes it can access the lowest element
 * of the stack before parsing begins.
 *
 * This grammar has a maximum depth, so I should be able to work that
 * out, set this value and everything will "just work". But that seems
 * like a lot of effort.
 */
#define YYINITDEPTH 50

/**
 * I need to use yytype_int16 before it is defined in the generated
 * source code, so this ensures it has the same type as the one I'm
 * using.
 */
#define YYTYPE_INT16 short int

/**
 * Try to ensure that no memory is allocated on the heap by bison
 */
#define YYMALLOC(x)
#define YYFREE(x)
#define YYSTACK_USE_ALLOCA 1

using namespace Psi;
using namespace Psi::Parser;

namespace {
  struct ParserValue {
    const char *cstr;
    PhysicalSourceLocation text;
    SharedPtr<Expression> expression;
    SharedPtr<NamedExpression> named_expression;
    ArrayList<SharedPtr<Expression> > expression_list;
    ArrayList<SharedPtr<NamedExpression> > named_expression_list;
  };

  struct ParserInternalArguments : BisonHelper<YYTYPE_INT16, YYSTYPE, YYLTYPE> {
    ParserInternalArguments(int mode_token_, const PhysicalSourceLocation& text_)
      : mode_token(mode_token_), text(text_), current(text_.begin), end(text_.end) {
    }

    ArrayList<SharedPtr<Expression> > result_expressions;
    SharedPtr<Expression> result_return_type;
    ArrayList<SharedPtr<NamedExpression> > result_named_expressions;

    int mode_token;
    PhysicalSourceLocation text;
    const char *current, *end;

    std::string error_message;
  };

  void yyerror(const YYLTYPE*,
               ParserInternalArguments& arguments,
               const char *s) {
    arguments.error_message = s;
  }

  /**
   * \brief Checks if a character is a "token" character.
   *
   * A token character is alphanumeric or underscore, so this is
   * equivalent the following in the C locale:
   *
   * \code isalpha(c) || isdigit(c) || c == '_' \endcode
   */
  bool token_char(char c) {
    return ((c >= 'A') && (c <= 'Z')) ||
      ((c >= 'a') && (c <= 'z')) ||
      ((c >= '0') && (c <= '9')) ||
      (c == '_');
  }

  int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, ParserInternalArguments& self);

  PhysicalSourceLocation combine_loc(const PhysicalSourceLocation& lhs, const PhysicalSourceLocation& rhs) {
    PSI_ASSERT(lhs.url == rhs.url);
    PhysicalSourceLocation p;
    p.url = lhs.url;
    p.first_line = lhs.first_line;
    p.first_column = lhs.first_column;
    p.begin = lhs.begin;
    p.last_line = rhs.last_line;
    p.last_column = rhs.last_column;
    p.end = rhs.end;
    return p;
  }

  PhysicalSourceLocation end_loc(const PhysicalSourceLocation& base) {
    PhysicalSourceLocation p;
    p.url = base.url;
    p.first_line = p.last_line = base.last_line;
    p.first_column = p.last_column = base.last_column;
    p.begin = p.end = base.end;
    return p;
  }

  SharedPtr<Expression> str_expression(const PhysicalSourceLocation& loc, const char *op) {
    // this might be dodgy - the number of characters given by
    // line/column numbers does not relate to the number of characters
    // in the "op" string.

    PhysicalSourceLocation text = loc;
    text.begin = op;
    text.end = op + std::strlen(op);

    return SharedPtr<Expression>(new TokenExpression(loc, TokenExpression::identifier, text));
  }

  SharedPtr<Expression> binary_expr(const PhysicalSourceLocation& origin,
                                    const PhysicalSourceLocation& op_loc, const char *op,
                                    const SharedPtr<Expression>& lhs,
                                    const SharedPtr<Expression>& rhs) {
    ArrayList<SharedPtr<Expression> > args;
    args.push_back(str_expression(op_loc, op));
    args.push_back(lhs);
    args.push_back(rhs);

    return SharedPtr<Expression>(new MacroExpression(origin, args));
  }

  SharedPtr<Expression> unary_expr(const PhysicalSourceLocation& origin,
                                   const PhysicalSourceLocation& op_loc, const char *op,
                                   const SharedPtr<Expression>& param) {
    ArrayList<SharedPtr<Expression> > args;
    args.push_back(str_expression(op_loc, op));
    args.push_back(param);

    return SharedPtr<Expression>(new MacroExpression(origin, args));
  }
}

#define yyoverflow(msg,yysp,yyssize,yyvp,yyvsize,yylp,yylsize,yystacksize) arguments.overflow(yysp,yyssize,yyvp,yyvsize,yylp,yylsize,yystacksize)

#define YYLLOC_DEFAULT(current, rhs, N)					\
  do {									\
    if (YYID(N)) {							\
      (current) = combine_loc(YYRHSLOC(rhs, 1), YYRHSLOC(rhs, N));      \
    } else {								\
      (current) = end_loc(YYRHSLOC(rhs, 0));				\
    }									\
  } while (0)
%}

%pure-parser
%locations

/* verbose errors and custom stack allocation (i.e. yyoverflow defined) will not work together in bison */
%error-verbose

%token INVALID
%token IDENTIFIER
%token COMPARE_EQUAL "=="
%token COMPARE_UNEQUAL "!="
%token COMPARE_LESS_EQUAL "<="
%token COMPARE_GREATER_EQUAL ">="
%token OPERATOR_ARROW "->"
%token UNKNOWN "unknown"
%token BLOCK

%token MODE_STATEMENT_LIST
%token MODE_ARGUMENT_LIST
%token MODE_FUNCTION_ARGUMENT_DECLARE

%type <text> IDENTIFIER
%type <cstr> product_operator add_operator compare_operator unary_operator
%type <expression> BLOCK expression or_expression and_expression xor_expression product_expression add_expression
%type <expression> unary_expression compare_expression return_type_declare macro_expression macro_not_list token_expression
%type <expression_list> compare_expression_build macro_list
%type <named_expression> statement named_expression
%type <named_expression_list> statement_list argument_list_declare_nonempty argument_list_declare argument_list argument_list_nonempty

%parse-param {ParserInternalArguments& arguments}
%lex-param {ParserInternalArguments& arguments}

%initial-action {
#ifndef YYERROR_VERBOSE
  if (false) {
  yyexhaustedlab:
    YYABORT;
  }
#endif

  @$.url = arguments.text.url;
  @$.begin = @$.end = arguments.current;
  @$.first_line = @$.last_line = arguments.text.first_line;
  @$.first_column = @$.last_column = arguments.text.first_column;
}

%%

root: MODE_STATEMENT_LIST statement_list {arguments.result_named_expressions = $2;}
| MODE_FUNCTION_ARGUMENT_DECLARE argument_list_declare return_type_declare {arguments.result_named_expressions = $2; arguments.result_return_type = $3;}
| MODE_ARGUMENT_LIST argument_list {arguments.result_named_expressions = $2;}
;

argument_list: {$$.clear();}
| argument_list_nonempty
;

argument_list_nonempty:
named_expression {$$.assign(1, $1);}
| argument_list_nonempty ',' named_expression {$$ = $1; $$.push_back($3);}
;

return_type_declare: /* blank */ {$$.reset();}
| OPERATOR_ARROW expression {$$ = $2;}
;

argument_list_declare: /* blank */ {$$.clear();}
| argument_list_declare_nonempty
;

argument_list_declare_nonempty:
named_expression {$$.assign(1, $1);}
| argument_list_declare_nonempty ',' named_expression {$$ = $1; $$.push_back($3);}
;

statement_list:
statement {$$.assign(1, $1);}
| statement_list ';' statement {$$ = $1; $$.push_back($3);}
;

statement:
{$$.reset(new NamedExpression(@$));}
| named_expression
;

named_expression:
expression {$$.reset(new NamedExpression(@$, $1));}
| IDENTIFIER ':' expression {$$.reset(new NamedExpression(@$, $3, $1));}
;

expression:
or_expression
| expression '=' or_expression {$$ = binary_expr(@$, @2, "__assign__", $1, $3);};
;

or_expression:
xor_expression
| or_expression '|' xor_expression {$$ = binary_expr(@$, @2, "__or__", $1, $3);}
;

xor_expression:
and_expression
| xor_expression '^' and_expression {$$ = binary_expr(@$, @2, "__xor__", $1, $3);}
;

and_expression:
compare_expression
| and_expression '&' compare_expression {$$ = binary_expr(@$, @2, "__and__", $1, $3);}
;

compare_expression:
add_expression
| compare_expression_build {
  SharedPtr<Expression> cmp = str_expression(@0, "__cmp__");
  ArrayList<SharedPtr<Expression> > elements;
  elements.push_back(cmp);
  elements.insert(elements.end(), $1.begin(), $1.end());
  $$.reset(new MacroExpression(@$, elements));
}
;

compare_expression_build:
add_expression compare_operator add_expression {
  $$.clear();
  $$.push_back($1);
  $$.push_back(str_expression(@2, $2));
  $$.push_back($3);
}
| compare_expression_build compare_operator add_expression {
  $$ = $1;
  $$.push_back(str_expression(@2, $2));
  $$.push_back($3);
}
;

compare_operator:
COMPARE_EQUAL {$$ = "__eq__";}
| COMPARE_UNEQUAL {$$ = "__ne__";}
| COMPARE_GREATER_EQUAL {$$ = "__ge__";}
| COMPARE_LESS_EQUAL {$$ = "__le__";}
| '<' {$$ = "__lt__";}
| '>' {$$ = "__gt__";}
;

add_expression:
product_expression
| add_expression add_operator product_expression {$$ = binary_expr(@$, @2, $2, $1, $3);}
;

add_operator: '+' {$$="__add__";} | '-' {$$="__sub__";};

product_expression:
unary_expression
| product_expression product_operator unary_expression {$$ = binary_expr(@$, @2, $2, $1, $3);}
;

product_operator: '*' {$$="__mul__";} | '/' {$$="__div__";} | '%' {$$="__mod__";};

unary_expression:
macro_expression
| unary_operator unary_expression {$$ = unary_expr(@$, @1, $1, $2);}
;

unary_operator:
'-' {$$ = "__neg__";}
| '!' {$$ = "__invert__";}
;

macro_expression:
macro_not_list
| macro_list {$$.reset(new MacroExpression(@$, $1));}
;

macro_not_list:
token_expression
| macro_expression '.' token_expression {$$.reset(new DotExpression(@$, $1, $3));}
| macro_expression '#' {$$ = $1;}
;

macro_list:
macro_not_list token_expression {$$.clear(); $$.push_back($1); $$.push_back($2);}
| macro_list token_expression {$$ = $1; $$.push_back($2);}
;

token_expression:
IDENTIFIER {$$.reset(new TokenExpression(@$, TokenExpression::identifier, $1));}
| BLOCK
;

%%

namespace {
  /**
   * \brief Scanner function.
   *
   * I've done this as a handwritten function rather than using Flex
   * because bending Flex to my will seems like slightly more effort
   * than doing this. I'd like it to be able to operate on a buffer
   * without altering it, which this function does, and it takes less
   * code than Flex and the myriad of options required to make a Flex
   * scanner sensible.
   *
   * \note Note that this function lives here rather than above the
   * main parser body (where it is declared) because it required the
   * parser token definitions.
   */
  int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, ParserInternalArguments& self) {
    char c;

    if (self.mode_token != 0) {
      int result = self.mode_token;
      self.mode_token = 0;
      return result;
    }

  next_char:
    llocp->begin = llocp->end;
    llocp->first_line = llocp->last_line;
    llocp->first_column = llocp->last_column;
    PSI_ASSERT(llocp->begin == self.current);

    if (self.current == self.end)
      return 0;

#define SCANNER_RETURN(val) do {lvalp->text = *llocp; return (val);} while(0)
#define SCANNER_ACCEPT() (++self.current, ++llocp->end, ++llocp->last_column)
#define SCANNER_NEWLINE() (++llocp->last_line, llocp->last_column = 1)

    c = *self.current;

    if (token_char(c)) {
      do {
        SCANNER_ACCEPT();
      } while ((self.current != self.end) && token_char(*self.current));
      SCANNER_RETURN(IDENTIFIER);
    } else if (std::strchr("<>=!", c)) {
      /* Multi-char comparison operators */
      SCANNER_ACCEPT();
      if ((self.current != self.end) && (*self.current == '=')) {
        SCANNER_ACCEPT();
        switch(c) {
        case '>': SCANNER_RETURN(COMPARE_GREATER_EQUAL);
        case '<': SCANNER_RETURN(COMPARE_LESS_EQUAL);
        case '=': SCANNER_RETURN(COMPARE_EQUAL);
        case '!': SCANNER_RETURN(COMPARE_UNEQUAL);
        default: std::abort();
        }
      } else {
        return c;
      }
    } else if (c == '-') {
      /* Arrow operator "->" */
      SCANNER_ACCEPT();
      if ((self.current != self.end) && (*self.current == '>')) {
        SCANNER_ACCEPT();
        return OPERATOR_ARROW;
      } else {
        return '-';
      }
    } else if (std::strchr(".:;,+*/%^&|", c)) {
      SCANNER_ACCEPT();
      SCANNER_RETURN(c);
    } else if (std::strchr("{[(", c)) {
      int brace_depth = 0, square_bracket_depth = 0, bracket_depth = 0;
      TokenExpression::TokenType block_type;

      switch(c) {
      case '(': block_type = TokenExpression::bracket; break;
      case '[': block_type = TokenExpression::square_bracket; break;
      case '{': block_type = TokenExpression::brace; break;
      default: PSI_FAIL("should not reach this point");
      }

      while(1) {
        c = *self.current;
        SCANNER_ACCEPT();

        if (c == '\\') {
          if (self.current == self.end)
            SCANNER_RETURN(INVALID);
          if (*self.current == '\n')
            SCANNER_NEWLINE();
          SCANNER_ACCEPT();
        } else if (c == '\n') {
          SCANNER_NEWLINE();
        } else if (c == '{') {
          ++brace_depth;
        } else if (c == '}') {
          if (brace_depth == 0)
            SCANNER_RETURN(INVALID);
          --brace_depth;
        } else if (brace_depth == 0) {
          if (c == '[') {
            ++square_bracket_depth;
          } else if (c == ']') {
            if (square_bracket_depth == 0)
              SCANNER_RETURN(INVALID);
            --square_bracket_depth;
          } else if (square_bracket_depth == 0) {
            if (c == '(') {
              ++bracket_depth;
            } else if (c == ')') {
              if (bracket_depth == 0)
                SCANNER_RETURN(INVALID);
              --bracket_depth;
            }
          }
        }

        if ((bracket_depth == 0) && (square_bracket_depth == 0) && (brace_depth == 0)) {
          PhysicalSourceLocation value_text(*llocp);
          ++value_text.begin;
          --value_text.end;
          lvalp->expression.reset(new TokenExpression(*llocp, block_type, value_text));
          return BLOCK;
        } else if (self.current == self.end) {
          SCANNER_RETURN(INVALID);
        }
      }
    } else if (std::strchr(" \t\r\v", c)) {
      SCANNER_ACCEPT();
      goto next_char;
    } else if (c == '\n') {
      SCANNER_ACCEPT();
      SCANNER_NEWLINE();
      goto next_char;
    } else {
      SCANNER_ACCEPT();
      return c;
    }

#undef SCANNER_ADVANCE
  }

  void parse_helper(ParserInternalArguments& internal) {
    int result = yyparse(internal);
    if (result)
      throw ParseError(internal.error_message);
  }
}

namespace Psi {
  namespace Parser {
    Element::Element(const PhysicalSourceLocation& location_)
      : location(location_) {
    }

    Expression::Expression(const PhysicalSourceLocation& location_, ExpressionType expression_type_)
      : Element(location_),
	expression_type(expression_type_) {
    }

    Expression::~Expression() {
    }

    TokenExpression::TokenExpression(const PhysicalSourceLocation& location_, TokenType token_type_, const PhysicalSourceLocation& text_)
      : Expression(location_, expression_token),
	token_type(token_type_),
	text(text_) {
    }

    TokenExpression::~TokenExpression() {
    }

    MacroExpression::MacroExpression(const PhysicalSourceLocation& location_, const ArrayList<SharedPtr<Expression> >& elements_)
      : Expression(location_, expression_macro), elements(elements_) {
    }

    MacroExpression::~MacroExpression() {
    }

    DotExpression::DotExpression(const PhysicalSourceLocation& location_, const SharedPtr<Expression>& left_, const SharedPtr<Expression>& right_)
      : Expression(location_, expression_dot), left(left_), right(right_) {
    }

    DotExpression::~DotExpression() {
    }

    NamedExpression::NamedExpression(const PhysicalSourceLocation& source_)
      : Element(source_) {
    }

    NamedExpression::NamedExpression(const PhysicalSourceLocation& source_, const SharedPtr<Expression>& expression_)
      : Element(source_), expression(expression_) {
    }

    NamedExpression::NamedExpression(const PhysicalSourceLocation& source_, const SharedPtr<Expression>& expression_, const PhysicalSourceLocation& name_)
      : Element(source_), name(name_), expression(expression_) {
    }

    NamedExpression::~NamedExpression() {
    }

    ParseError::ParseError(const std::string& reason) : std::runtime_error(reason) {
    }

    ParseError::~ParseError() throw() {
    }

    /** \brief parse a statement list.
     * \param text Text to parse.
     */
    ArrayList<SharedPtr<NamedExpression> > parse_statement_list(const PhysicalSourceLocation& text) {
      ParserInternalArguments args(MODE_STATEMENT_LIST, text);
      parse_helper(args);
      return args.result_named_expressions;
    }

    /** \brief parse an argument list.
     * \details an argument list is a list of Expressions forming arguments to a function call.
     * \param text Text to parse.
     */
    ArrayList<SharedPtr<NamedExpression> > parse_argument_list(const PhysicalSourceLocation& text) {
      ParserInternalArguments args(MODE_ARGUMENT_LIST, text);
      parse_helper(args);
      return args.result_named_expressions;
    }

    /** \brief parse a function argument declaration.
     * \details This is a list of argument declarations possibly
     * followed by a return type Expression.
     * \param text Text to parse.
     */
    ArgumentDeclarations parse_function_argument_declarations(const PhysicalSourceLocation& text) {
      ParserInternalArguments args(MODE_FUNCTION_ARGUMENT_DECLARE, text);
      parse_helper(args);
      ArgumentDeclarations result;
      result.arguments = args.result_named_expressions;
      result.return_type = args.result_return_type;
      return result;
    }
  }
}
